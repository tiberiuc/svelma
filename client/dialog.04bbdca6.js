import{c as t,d as e,b as n,x as r,e as o,G as a,y as s,f as c,g as i,h as l,v as p,k as m,l as $,O as u,a as f}from"./chunk.dd133d53.js";import{f as h,i as d,j as g}from"./chunk.fe88db79.js";import"./chunk.0a41e55b.js";import{a as v}from"./chunk.ff8558e2.js";import"./chunk.de8c22d6.js";import{a as w}from"./chunk.116159f4.js";import{a as y}from"./chunk.509f3cae.js";function k(t){var e;return{c(){e=a("Dialog")},l(t){e=s(t,"Dialog")},m(t,n){m(t,e,n)},d(t){t&&l(e)}}}function D(t){var e;return{c(){e=a("Confirm")},l(t){e=s(t,"Confirm")},m(t,n){m(t,e,n)},d(t){t&&l(e)}}}function j(t){var e;return{c(){e=a("Confirm (custom)")},l(t){e=s(t,"Confirm (custom)")},m(t,n){m(t,e,n)},d(t){t&&l(e)}}}function E(t){var e,n,a,f,d=new h({props:{type:"is-primary",$$slots:{default:[k]},$$scope:{ctx:t}}});d.$on("click",t.click_handler);var g=new h({props:{type:"is-info",$$slots:{default:[D]},$$scope:{ctx:t}}});g.$on("click",t.click_handler_1);var v=new h({props:{type:"is-danger",$$slots:{default:[j]},$$scope:{ctx:t}}});return v.$on("click",t.click_handler_2),{c(){e=o("div"),d.$$.fragment.c(),n=r(),g.$$.fragment.c(),a=r(),v.$$.fragment.c(),this.h()},l(t){e=c(t,"DIV",{slot:!0},!1);var r=i(e);d.$$.fragment.l(r),n=s(r,"\n    "),g.$$.fragment.l(r),a=s(r,"\n    "),v.$$.fragment.l(r),r.forEach(l),this.h()},h(){u(e,"slot","preview")},m(t,r){m(t,e,r),p(d,e,null),$(e,n),p(g,e,null),$(e,a),p(v,e,null),f=!0},p(t,e){var n={};t.$$scope&&(n.$$scope={changed:t,ctx:e}),d.$set(n);var r={};t.$$scope&&(r.$$scope={changed:t,ctx:e}),g.$set(r);var o={};t.$$scope&&(o.$$scope={changed:t,ctx:e}),v.$set(o)},i(t){f||(d.$$.fragment.i(t),g.$$.fragment.i(t),v.$$.fragment.i(t),f=!0)},o(t){d.$$.fragment.o(t),g.$$.fragment.o(t),v.$$.fragment.o(t),f=!1},d(t){t&&l(e),d.$destroy(),g.$destroy(),v.$destroy()}}}function b(t){return{c:f,l:f,m:f,p:f,i:f,o:f,d:f}}function x(t){var e;return{c(){e=a("Prompt")},l(t){e=s(t,"Prompt")},m(t,n){m(t,e,n)},d(t){t&&l(e)}}}function _(t){var e;return{c(){e=a("Date Prompt")},l(t){e=s(t,"Date Prompt")},m(t,n){m(t,e,n)},d(t){t&&l(e)}}}function P(t){var e,n,a,f=new h({props:{type:"is-primary",$$slots:{default:[x]},$$scope:{ctx:t}}});f.$on("click",t.click_handler_3);var d=new h({props:{type:"is-link",$$slots:{default:[_]},$$scope:{ctx:t}}});return d.$on("click",t.click_handler_4),{c(){e=o("div"),f.$$.fragment.c(),n=r(),d.$$.fragment.c(),this.h()},l(t){e=c(t,"DIV",{slot:!0},!1);var r=i(e);f.$$.fragment.l(r),n=s(r,"\n    "),d.$$.fragment.l(r),r.forEach(l),this.h()},h(){u(e,"slot","preview")},m(t,r){m(t,e,r),p(f,e,null),$(e,n),p(d,e,null),a=!0},p(t,e){var n={};t.$$scope&&(n.$$scope={changed:t,ctx:e}),f.$set(n);var r={};t.$$scope&&(r.$$scope={changed:t,ctx:e}),d.$set(r)},i(t){a||(f.$$.fragment.i(t),d.$$.fragment.i(t),a=!0)},o(t){f.$$.fragment.o(t),d.$$.fragment.o(t),a=!1},d(t){t&&l(e),f.$destroy(),d.$destroy()}}}function B(t){return{c:f,l:f,m:f,p:f,i:f,o:f,d:f}}function C(t){var e,n,u,f,h,d,g,k,D,j,x,_,C,T,I,O,Y,N,U,q,A,H,W,S,V,G,R,z,F,J,K,L,M,Q,X,Z,tt,et,nt,rt=new v({props:{title:"Dialog",subtitle:"User alerts, promps, and confirmation dialogs"}}),ot=new w({props:{code:"<script>\n  import { Button, Dialog } from 'svelma'\n\n  function alert() {\n    Dialog.alert('Alles ist gut')\n  }\n\n  const thenHandler = result => Toast.create(`You ${result ? 'confirmed' : 'canceled'}`)\n\n  function confirm(type) {\n    switch(type) {\n      case 'custom':\n        return Dialog.confirm({\n          message: 'This is a custom confirmation message',\n          title: \"I'm a title!\",\n          type: 'is-danger',\n          icon: 'times-circle'\n        })\n        .then(thenHandler)\n      default:\n        Dialog.confirm('Shall we dance?')\n        .then(thenHandler)\n    }\n  }\n<\/script>\n\n<Button type=\"is-primary\" on:click={() => alert()}>Dialog</Button>\n<Button type=\"is-info\" on:click={() => confirm()}>Confirm</Button>\n<Button type=\"is-danger\" on:click={() => confirm('custom')}>Confirm (custom)</Button>\n",$$slots:{default:[b],preview:[E]},$$scope:{ctx:t}}}),at=new w({props:{code:"<script>\n  import { Button, Dialog, Toast } from 'svelma'\n\n  function prompt(opts) {\n    Dialog.prompt({\n      message: \"What is your quest?\",\n      ...opts\n    })\n    .then(prompt => Toast.create(`Your answer was: '${prompt}'`))\n  }\n<\/script>\n\n<Button type=\"is-primary\" on:click={() => prompt()}>Prompt</Button>\n<Button type=\"is-link\" on:click={() => prompt({ message: 'Which date?', inputProps: { type: 'date' }})}>Date Prompt</Button>",$$slots:{default:[B],preview:[P]},$$scope:{ctx:t}}}),st=new y({props:{jsdoc:t.jsdoc}});return{c(){rt.$$.fragment.c(),e=r(),n=o("p"),u=a("Alert and Dialog"),f=r(),h=o("p"),d=a("Use "),g=o("code"),k=a("Dialog.alert()"),D=a(" and "),j=o("code"),x=a("Dialog.confirm()"),_=a(" to create these kinds of dialogs.\nThe methods return a promise that is resolved when the user cancels or confirms the alert. If the use closes/cancels the\nvalue will be "),C=o("code"),T=a("false"),I=a(". If the user clicks the confirm button the value will be "),O=o("code"),Y=a("true"),N=a(".\n\nThe first argument can either be an object of options or a string to use as the message."),U=r(),ot.$$.fragment.c(),q=r(),A=o("hr"),H=r(),W=o("p"),S=a("Prompt"),V=r(),G=o("p"),R=a("Use "),z=o("code"),F=a("Dialog.prompt()"),J=a(" to programmatically create prompts for user input. By default the\ndialog will be created with a required text input. You can control the props (attributes) on the prompt with the\n"),K=o("code"),L=a("inputProps"),M=a(" prop.\n\n"),Q=o("code"),X=a("prompt()"),Z=a(" returns a promise that will be resolved with the prompt input value if the user confirms, or null\nif they cancel/close."),tt=r(),at.$$.fragment.c(),et=r(),st.$$.fragment.c(),this.h()},l(t){rt.$$.fragment.l(t),e=s(t,"\n\n"),n=c(t,"P",{class:!0},!1);var r=i(n);u=s(r,"Alert and Dialog"),r.forEach(l),f=s(t,"\n\n"),h=c(t,"P",{class:!0},!1);var o=i(h);d=s(o,"Use "),g=c(o,"CODE",{},!1);var a=i(g);k=s(a,"Dialog.alert()"),a.forEach(l),D=s(o," and "),j=c(o,"CODE",{},!1);var p=i(j);x=s(p,"Dialog.confirm()"),p.forEach(l),_=s(o," to create these kinds of dialogs.\nThe methods return a promise that is resolved when the user cancels or confirms the alert. If the use closes/cancels the\nvalue will be "),C=c(o,"CODE",{},!1);var m=i(C);T=s(m,"false"),m.forEach(l),I=s(o,". If the user clicks the confirm button the value will be "),O=c(o,"CODE",{},!1);var $=i(O);Y=s($,"true"),$.forEach(l),N=s(o,".\n\nThe first argument can either be an object of options or a string to use as the message."),o.forEach(l),U=s(t,"\n\n"),ot.$$.fragment.l(t),q=s(t,"\n\n"),A=c(t,"HR",{class:!0},!1),i(A).forEach(l),H=s(t,"\n\n"),W=c(t,"P",{class:!0},!1);var v=i(W);S=s(v,"Prompt"),v.forEach(l),V=s(t,"\n\n"),G=c(t,"P",{class:!0},!1);var w=i(G);R=s(w,"Use "),z=c(w,"CODE",{},!1);var y=i(z);F=s(y,"Dialog.prompt()"),y.forEach(l),J=s(w," to programmatically create prompts for user input. By default the\ndialog will be created with a required text input. You can control the props (attributes) on the prompt with the\n"),K=c(w,"CODE",{},!1);var E=i(K);L=s(E,"inputProps"),E.forEach(l),M=s(w," prop.\n\n"),Q=c(w,"CODE",{},!1);var b=i(Q);X=s(b,"prompt()"),b.forEach(l),Z=s(w," returns a promise that will be resolved with the prompt input value if the user confirms, or null\nif they cancel/close."),w.forEach(l),tt=s(t,"\n\n"),at.$$.fragment.l(t),et=s(t,"\n\n"),st.$$.fragment.l(t),this.h()},h(){n.className="title is-4",h.className="content",A.className="is-medium",W.className="title is-4",G.className="content"},m(t,r){p(rt,t,r),m(t,e,r),m(t,n,r),$(n,u),m(t,f,r),m(t,h,r),$(h,d),$(h,g),$(g,k),$(h,D),$(h,j),$(j,x),$(h,_),$(h,C),$(C,T),$(h,I),$(h,O),$(O,Y),$(h,N),m(t,U,r),p(ot,t,r),m(t,q,r),m(t,A,r),m(t,H,r),m(t,W,r),$(W,S),m(t,V,r),m(t,G,r),$(G,R),$(G,z),$(z,F),$(G,J),$(G,K),$(K,L),$(G,M),$(G,Q),$(Q,X),$(G,Z),m(t,tt,r),p(at,t,r),m(t,et,r),p(st,t,r),nt=!0},p(t,e){var n={};t.$$scope&&(n.$$scope={changed:t,ctx:e}),ot.$set(n);var r={};t.$$scope&&(r.$$scope={changed:t,ctx:e}),at.$set(r);var o={};t.jsdoc&&(o.jsdoc=e.jsdoc),st.$set(o)},i(t){nt||(rt.$$.fragment.i(t),ot.$$.fragment.i(t),at.$$.fragment.i(t),st.$$.fragment.i(t),nt=!0)},o(t){rt.$$.fragment.o(t),ot.$$.fragment.o(t),at.$$.fragment.o(t),st.$$.fragment.o(t),nt=!1},d(t){rt.$destroy(t),t&&(l(e),l(n),l(f),l(h),l(U)),ot.$destroy(t),t&&(l(q),l(A),l(H),l(W),l(V),l(G),l(tt)),at.$destroy(t),t&&l(et),st.$destroy(t)}}}async function T(){const t=await this.fetch("components/dialog.json");return{jsdoc:await t.json()}}function I(t){d.prompt({message:"What is your quest?",...t}).then(t=>g.create(`Your answer was: '${t}'`))}function O(t,e,n){let{jsdoc:r}=e;const o=t=>g.create(`You ${t?"confirmed":"canceled"}`);function a(t){switch(t){case"custom":return d.confirm({message:"This is a custom confirmation message",title:"I'm a title!",type:"is-danger",icon:"times-circle"}).then(o);default:d.confirm("Shall we dance?").then(o)}}return t.$set=(t=>{"jsdoc"in t&&n("jsdoc",r=t.jsdoc)}),{jsdoc:r,confirm:a,click_handler:function(){d.alert("Alles ist gut")},click_handler_1:function(){return a()},click_handler_2:function(){return a("custom")},click_handler_3:function(){return I()},click_handler_4:function(){return I({message:"Which date?",inputProps:{type:"date"}})}}}export default class extends t{constructor(t){super(),e(this,t,O,C,n,["jsdoc"])}}export{T as preload};
//# sourceMappingURL=dialog.04bbdca6.js.map
