{"version":3,"file":"dialog.04bbdca6.js","sources":["../../../src/routes/components/dialog.svelte"],"sourcesContent":["<script context=\"module\">\n  export async function preload() {\n    const res = await this.fetch(`components/dialog.json`);\n    const jsdoc = await res.json();\n\n    return { jsdoc };\n  }\n</script>\n\n<script>\n  import { Button, Dialog, Toast } from 'svelma'\n  import Codepreview from '../../components/Code.svelte'\n  import DocHeader from '../../components/DocHeader.svelte'\n  import Example from '../../components/Example.svelte'\n  import JSDoc from '../../components/JSDoc.svelte'\n\n  export let jsdoc\n\n  function alert() {\n    Dialog.alert('Alles ist gut')\n  }\n\n  const thenHandler = result => Toast.create(`You ${result ? 'confirmed' : 'canceled'}`)\n\n  function confirm(type) {\n    switch(type) {\n      case 'custom':\n        return Dialog.confirm({\n          message: 'This is a custom confirmation message',\n          title: \"I'm a title!\",\n          type: 'is-danger',\n          icon: 'times-circle'\n        })\n        .then(thenHandler)\n      default:\n        Dialog.confirm('Shall we dance?')\n        .then(thenHandler)\n    }\n  }\n\n  function prompt(opts) {\n    Dialog.prompt({\n      message: \"What is your quest?\",\n      ...opts\n    })\n    .then(prompt => Toast.create(`Your answer was: '${prompt}'`))\n  }\n</script>\n\n<DocHeader title=\"Dialog\" subtitle=\"User alerts, promps, and confirmation dialogs\" />\n\n<p class=\"title is-4\">Alert and Dialog</p>\n\n<p class=\"content\">Use <code>Dialog.alert()</code> and <code>Dialog.confirm()</code> to create these kinds of dialogs.\nThe methods return a promise that is resolved when the user cancels or confirms the alert. If the use closes/cancels the\nvalue will be <code>false</code>. If the user clicks the confirm button the value will be <code>true</code>.\n\nThe first argument can either be an object of options or a string to use as the message.</p>\n\n<Example code={`<script>\n  import { Button, Dialog } from 'svelma'\n\n  function alert() {\n    Dialog.alert('Alles ist gut')\n  }\n\n  const thenHandler = result => Toast.create(\\`You \\${result ? 'confirmed' : 'canceled'}\\`)\n\n  function confirm(type) {\n    switch(type) {\n      case 'custom':\n        return Dialog.confirm({\n          message: 'This is a custom confirmation message',\n          title: \"I'm a title!\",\n          type: 'is-danger',\n          icon: 'times-circle'\n        })\n        .then(thenHandler)\n      default:\n        Dialog.confirm('Shall we dance?')\n        .then(thenHandler)\n    }\n  }\n</script>\n\n<Button type=\"is-primary\" on:click={() => alert()}>Dialog</Button>\n<Button type=\"is-info\" on:click={() => confirm()}>Confirm</Button>\n<Button type=\"is-danger\" on:click={() => confirm('custom')}>Confirm (custom)</Button>\n`}>\n  <div slot=\"preview\">\n    <Button type=\"is-primary\" on:click={() => alert()}>Dialog</Button>\n    <Button type=\"is-info\" on:click={() => confirm()}>Confirm</Button>\n    <Button type=\"is-danger\" on:click={() => confirm('custom')}>Confirm (custom)</Button>\n  </div>\n</Example>\n\n<hr class=\"is-medium\">\n\n<p class=\"title is-4\">Prompt</p>\n\n<p class=\"content\">Use <code>Dialog.prompt()</code> to programmatically create prompts for user input. By default the\ndialog will be created with a required text input. You can control the props (attributes) on the prompt with the\n<code>inputProps</code> prop.\n\n<code>prompt()</code> returns a promise that will be resolved with the prompt input value if the user confirms, or null\nif they cancel/close.</p>\n\n<Example code={`<script>\n  import { Button, Dialog, Toast } from 'svelma'\n\n  function prompt(opts) {\n    Dialog.prompt({\n      message: \"What is your quest?\",\n      ...opts\n    })\n    .then(prompt => Toast.create(\\`Your answer was: '\\${prompt}'\\`))\n  }\n</script>\n\n<Button type=\"is-primary\" on:click={() => prompt()}>Prompt</Button>\n<Button type=\"is-link\" on:click={() => prompt({ message: 'Which date?', inputProps: { type: 'date' }})}>Date Prompt</Button>`\n}>\n  <div slot=\"preview\">\n    <Button type=\"is-primary\" on:click={() => prompt()}>Prompt</Button>\n    <Button type=\"is-link\" on:click={() => prompt({ message: 'Which date?', inputProps: { type: 'date' }})}>Date Prompt</Button>\n  </div>\n</Example>\n\n<JSDoc {jsdoc} />"],"names":["ctx","jsdoc","async","preload","res","this","fetch","json","prompt","opts","Dialog","message","then","Toast","create","thenHandler","result","confirm","type","title","icon","alert"],"mappings":"qyBA0FwCA,2GACHA,sHACEA,gmCA+BCA,oHACHA,qzBAjEtB,q6BAgDA,0hBAqBPC,w5GAAAA,oWA/HCC,eAAeC,IACpB,MAAMC,QAAYC,KAAKC,MAAM,0BAG7B,MAAO,CAAEL,YAFWG,EAAIG,QAqC1B,SAASC,EAAOC,GACdC,EAAOF,OAAO,CACZG,QAAS,yBACNF,IAEJG,KAAKJ,GAAUK,EAAMC,4BAA4BN,yBA7BpD,UAAWP,KAMX,MAAMc,EAAcC,GAAUH,EAAMC,cAAcE,EAAS,YAAc,cAEzE,SAASC,EAAQC,GACf,OAAOA,GACL,IAAK,SACH,OAAOR,EAAOO,QAAQ,CACpBN,QAAS,wCACTQ,MAAO,eACPD,KAAM,YACNE,KAAM,iBAEPR,KAAKG,GACR,QACEL,EAAOO,QAAQ,mBACdL,KAAKG,uGAjBVL,EAAOW,MAAM"}